[SUT]
# Path to the binary file of the SUT.
# This can, for example, be an .elf file or a .bin file.
binary_file_path = ./example_firmware/CY8CKIT_usb_msc/mtb-example-usb-msc-logger.elf

# Address of the root node of the CFG.
# If 'binary_file_path' is an elf, you can also specify a symbol name here.
# Breakpoints are placed at nodes of this CFG.
entrypoint = usb_comm_process
#usb_comm_process

# Number of inputs that must be executed without a breakpoint hit until
# breakpoints are rotated.
until_rotate_breakpoints = 100


# Maximum number of breakpoints that can be placed at any given time.
max_breakpoints = 6

# ignore_functions is a space separated list of function names.
# Example: ignore_functions = malloc free
# These functions will not be included in the CFG.
# This setting is optional, leave it empty if you dont want to ignore any function.
ignore_functions =

# One of {Hardware, QEMU, gdbserver, SUTRunsOnHost}
# Hardware: An external component starts a gdb server and GDBFuzz can connect
#     to this gdb server on port 4242
# QEMU: GDBFuzz starts QEMU. QEMU emulates binary_file_path and starts gdbserver.
# gdbserver: GDBFuzz starts gdbserver. gdbserver runs binary_file_path.
target_mode = Hardware

# Set this to False if you want to start ghidra, analyze the SUT,
# and start the ghidra bridge server manually.
start_ghidra = True

# Space separated list of addresses where software breakpoints (for error
# handling code) are set.
# Example: software_breakpoint_addresses = 0x123 0x432
software_breakpoint_addresses =

# Whether all triggered software breakpoints are considered as crash
consider_sw_breakpoint_as_error = True

[SUTConnection]
# The class 'SerialConnection.py' in file 'connections/SerialConnection.py' implements
# how inputs are sent to the SUT.
# Inputs can, for example, be sent over Wi-Fi, Serial, Bluetooth, ...
# This class must inherit from connections/SUTConnection.py.
# See connections/SUTConnection.py for more information.
SUT_connection_file = USBBulkTransfer.py
vendor_ID = 1234
product_ID = 5678

[GDB]
path_to_gdb = gdb-multiarch ./example_firmware/CY8CKIT_usb_msc/mtb-example-usb-msc-logger.elf
#Written in address:port
gdb_server_address = localhost:3334


[Fuzzer]
# In Bytes
maximum_input_length = 100
# In seconds
single_run_timeout = 10
# In seconds
total_runtime = 86400

# Optional
# Path to a directory where each file contains one seed. If you don't want to
# use seeds, leave the value empty, like so:
# seeds_directory =
seeds_directory =  ./example_firmware/CY8CKIT_usb_msc/seeds

[BreakpointStrategy]
# Filename of the Breakpoint Strategy. This file must be in the
breakpoint_strategy_file = RandomBasicBlockNoCorpusStrategy.py


[Dependencies]
# Path to dependencies. You you do not use the docker containers,
# you may need to set these.
path_to_qemu = ./dependencies/qemu/build/qemu-x86_64
path_to_ghidra = ./dependencies/ghidra/
ghidra_port = 4567



[LogsAndVisualizations]
# Verbosity of logging output.
# One of {DEBUG, INFO, WARNING, ERROR, CRITICAL}
loglevel = INFO

# Path to a directory where output files (e.g. graphs, logfiles) are stored.
output_directory = ./output/cy8ckit_usb_bulk_no_corpus

# If set to True, an MQTT client sends UI elements (e.g. graphs)
enable_UI = False
