# This config file is used to test GDBFuzz on the arduinojson example firmware.
# Copyright (c) 2022 Robert Bosch GmbH
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


[SUT]
# Path to the binary file of the SUT.
# This can, for example, be an .elf file or a .bin file.
binary_file_path = ./example_firmware/esp32_wifi_http_server/simple.elf

# Address of the root node of the CFG.
# If 'binary_file_path' is an elf, you can also specify a symbol name here.
# Breakpoints are placed at nodes of this CFG.
entrypoint = http_parser_execute

# Number of inputs that must be executed without a breakpoint hit until
# breakpoints are rotated.
until_rotate_breakpoints = 100


# Maximum number of breakpoints that can be placed at any given time.
max_breakpoints = 2

# ignore_functions is a space separated list of function names.
# Example: ignore_functions = malloc free
# These functions will not be included in the CFG.
# This setting is optional, leave it empty if you dont want to ignore any function.
ignore_functions = __assert_func esp_log_timestamp esp_log_write 
#cb_url cb_header_field cb_header_value cb_on_body cb_no_body cb_headers_complete

# One of {Hardware, QEMU, SUTRunsOnHost}
# Hardware: An external component starts a gdb server and GDBFuzz can connect
#     to this gdb server
# QEMU: GDBFuzz starts QEMU. QEMU emulates binary_file_path and starts gdbserver.
# SUTRunsOnHost: GDBFuzz start the target program within GDB.
target_mode = Hardware

# Set this to False if you want to start ghidra, analyze the SUT,
# and start the ghidra bridge server manually.
start_ghidra = True

# Space separated list of addresses where software breakpoints (for error
# handling code) are set.
# Example: software_breakpoint_addresses = 0x123 0x432
software_breakpoint_addresses =


# Whether all triggered software breakpoints are considered as crash
consider_sw_breakpoint_as_error = False

[SUTConnection]
# The class 'SerialConnection.py' in file 'connections/SerialConnection.py' implements
# how inputs are sent to the SUT.
# Inputs can, for example, be sent over Wi-Fi, Serial, Bluetooth, ...
# This class must inherit from connections/SUTConnection.py.
# See connections/SUTConnection.py for more information.
SUT_connection_file = TCPConnection.py
target_hostname = 192.168.0.28
target_port = 80

[GDB]
path_to_gdb = ../.espressif/tools/xtensa-esp-elf-gdb/12.1_20221002/xtensa-esp-elf-gdb/bin/xtensa-esp32-elf-gdb ./example_firmware/esp32_wifi_http_server/simple.elf
#Written in address:port
gdb_server_address = localhost:8888

[Fuzzer]
# In Bytes
maximum_input_length = 100
# In seconds
single_run_timeout = 10
# In seconds
total_runtime = 86400

# Optional
# Path to a directory where each file contains one seed. If you don't want to
# use seeds, leave the value empty, like so:
#seeds_directory =
seeds_directory = ./example_firmware/esp32_wifi_http_server/seeds


[BreakpointStrategy]
# Filename of the Breakpoint Strategy. This file must be in the
# ./src/GDBFuzz/breakpoint_strategies directory.
breakpoint_strategy_file = RandomBasicBlockStrategy.py

[Dependencies]
# Path to dependencies. You you do not use the docker containers,
# you may need to set these.
path_to_qemu = ./dependencies/qemu/build/qemu-x86_64
path_to_ghidra = ./dependencies/ghidra/
ghidra_port = 4568

[LogsAndVisualizations]
# Verbosity of logging output.
# One of {DEBUG, INFO, WARNING, ERROR, CRITICAL}
loglevel = INFO

# Path to a directory where output files (e.g. graphs, logfiles) are stored.
output_directory = ./output/esp32_http/

# If set to True, an MQTT client sends UI elements (e.g. graphs)
enable_UI = False